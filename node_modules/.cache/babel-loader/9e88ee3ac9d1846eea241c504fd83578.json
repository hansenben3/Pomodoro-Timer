{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benna\\\\Desktop\\\\Thinkful Homework\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\TimerOnDisplay.js\";\nimport React from \"react\";\n\nconst calculatePercentage = () => {\n  var _session;\n\n  if (((_session = session) === null || _session === void 0 ? void 0 : _session.label) === \"Focusing\") {\n    var _session2;\n\n    return ((_session2 = session) === null || _session2 === void 0 ? void 0 : _session2.timeRemaining) / (focusDuration * 60);\n  } else {\n    var _session3;\n\n    return ((_session3 = session) === null || _session3 === void 0 ? void 0 : _session3.timeRemaining) / (breakDuration * 60);\n  }\n};\n\nfunction calculateTimeRemaining(time) {\n  let min = Math.floor(time / 60);\n  let sec = time % 60;\n  sec = sec < 10 ? \"0\" + sec : sec;\n  return min + \":\" + sec;\n}\n\nfunction TimerOnDisplay({\n  session,\n  focusDuration\n}) {\n  if (true) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, session === null || session === void 0 ? void 0 : session.label, \" for \", focusDuration, \":00 minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }, calculateTimeRemaining(session === null || session === void 0 ? void 0 : session.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": calculatePercentage // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: calculatePercentage\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    })))));\n  } else {}\n}\n\nexport default TimerOnDisplay;","map":{"version":3,"sources":["C:/Users/benna/Desktop/Thinkful Homework/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimerOnDisplay.js"],"names":["React","calculatePercentage","session","label","timeRemaining","focusDuration","breakDuration","calculateTimeRemaining","time","min","Math","floor","sec","TimerOnDisplay","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AAE9B,MAAG,aAAAC,OAAO,UAAP,4CAASC,KAAT,MAAmB,UAAtB,EAAiC;AAAA;;AAC/B,WAAO,cAAAD,OAAO,UAAP,8CAASE,aAAT,KAAwBC,aAAa,GAAC,EAAtC,CAAP;AACD,GAFD,MAGI;AAAA;;AACF,WAAO,cAAAH,OAAO,UAAP,8CAASE,aAAT,KAAwBE,aAAa,GAAC,EAAtC,CAAP;AACD;AAGJ,CAVD;;AAYA,SAASC,sBAAT,CAAiCC,IAAjC,EAAuC;AACnC,MAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAC,EAAhB,CAAV;AACA,MAAII,GAAG,GAAGJ,IAAI,GAAC,EAAf;AAEAI,EAAAA,GAAG,GAAGA,GAAG,GAAG,EAAN,GAAW,MAAMA,GAAjB,GAAuBA,GAA7B;AAEA,SAAOH,GAAG,GAAG,GAAN,GAAYG,GAAnB;AACH;;AAED,SAASC,cAAT,CAAyB;AAACX,EAAAA,OAAD;AAAUG,EAAAA;AAAV,CAAzB,EAAmD;AAC/C,MAAG,IAAH,EAAQ;AACR,wBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,OADH,aACGA,OADH,uBACGA,OAAO,CAAEC,KADZ,WACwBE,aADxB,gBAFF,eAME;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGE,sBAAsB,CAACL,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEE,aAAV,CADzB,eANF,CADF,CAFA,eAcA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEU,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,uBAAc,GAHhB;AAIE,uBAAc,KAJhB;AAKE,uBAAeb,mBALjB,CAKsC;AALtC;AAME,MAAA,KAAK,EAAE;AAAEc,QAAAA,KAAK,EAAEd;AAAT,OANT,CAMyC;AANzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAdA,CADA;AA+BC,GAhCD,MAiCI,CAEH;AACJ;;AAED,eAAeY,cAAf","sourcesContent":["import React from \"react\";\r\n\r\nconst calculatePercentage = () => {\r\n\r\n    if(session?.label === \"Focusing\"){\r\n      return session?.timeRemaining/(focusDuration*60);\r\n    }\r\n    else{\r\n      return session?.timeRemaining/(breakDuration*60);\r\n    }\r\n   \r\n\r\n}\r\n\r\nfunction calculateTimeRemaining (time) {\r\n    let min = Math.floor(time/60);\r\n    let sec = time%60;\r\n\r\n    sec = sec < 10 ? \"0\" + sec : sec;\r\n    \r\n    return min + \":\" + sec;\r\n}\r\n\r\nfunction TimerOnDisplay ({session, focusDuration}) {\r\n    if(true){\r\n    return (\r\n    <div>\r\n    {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n    <div className=\"row mb-2\">\r\n      <div className=\"col\">\r\n        {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n        <h2 data-testid=\"session-title\">\r\n          {session?.label} for {focusDuration}:00 minutes                      \r\n        </h2>\r\n        {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n        <p className=\"lead\" data-testid=\"session-sub-title\">\r\n          {calculateTimeRemaining(session?.timeRemaining)} remaining\r\n        </p>\r\n      </div>\r\n    </div>\r\n    <div className=\"row mb-2\">\r\n      <div className=\"col\">\r\n        <div className=\"progress\" style={{ height: \"20px\" }}>\r\n          <div\r\n            className=\"progress-bar\"\r\n            role=\"progressbar\"\r\n            aria-valuemin=\"0\"\r\n            aria-valuemax=\"100\"\r\n            aria-valuenow={calculatePercentage} // TODO: Increase aria-valuenow as elapsed time increases\r\n            style={{ width: calculatePercentage }} // TODO: Increase width % as elapsed time increases\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n    )\r\n    }\r\n    else{\r\n\r\n    }\r\n}\r\n\r\nexport default TimerOnDisplay;"]},"metadata":{},"sourceType":"module"}