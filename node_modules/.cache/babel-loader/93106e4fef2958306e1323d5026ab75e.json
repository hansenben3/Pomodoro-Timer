{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benna\\\\Desktop\\\\Thinkful Homework\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\TimerOnDisplay.js\";\nimport React from \"react\";\nimport breakDuration from \"./BreakDuration\";\nimport focusDuration from \"./FocusDuration\";\n\nfunction TimerOnDisplay(props) {\n  function calculateTimeRemaining(time) {\n    let min = Math.floor(time / 60);\n    let sec = time % 60;\n    sec = sec < 10 ? \"0\" + sec : sec;\n    return min + \":\" + sec;\n  }\n\n  function maxVal() {\n    if (props.session.label === \"Focusing\") {\n      return props.focusDuration * 60;\n    } else {\n      return props.breakDuration * 60;\n    }\n  }\n\n  if (props.session !== null) {\n    var _props$session, _props$session2;\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }, (_props$session = props.session) === null || _props$session === void 0 ? void 0 : _props$session.label, \" for \", props.focusDuration, \":00 minutes\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, calculateTimeRemaining((_props$session2 = props.session) === null || _props$session2 === void 0 ? void 0 : _props$session2.timeRemaining), \" remaining\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": maxVal(),\n      \"aria-valuenow\": props.focusDuration * 60 - props.session.timeRemaining // TODO: Increase aria-valuenow as elapsed time increases\n      ,\n      style: {\n        width: (props.focusDuration * 60 - props.session.timeRemaining) / (props.focusDuration * 60) * 100 + \"%\"\n      } // TODO: Increase width % as elapsed time increases\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    })))));\n  } else {\n    return null;\n  }\n}\n\nexport default TimerOnDisplay;","map":{"version":3,"sources":["C:/Users/benna/Desktop/Thinkful Homework/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/TimerOnDisplay.js"],"names":["React","breakDuration","focusDuration","TimerOnDisplay","props","calculateTimeRemaining","time","min","Math","floor","sec","maxVal","session","label","timeRemaining","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAEA,SAASC,cAAT,CAAyBC,KAAzB,EAAgC;AAE5B,WAASC,sBAAT,CAAiCC,IAAjC,EAAuC;AACnC,QAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAC,EAAhB,CAAV;AACA,QAAII,GAAG,GAAGJ,IAAI,GAAC,EAAf;AAEAI,IAAAA,GAAG,GAAGA,GAAG,GAAG,EAAN,GAAW,MAAMA,GAAjB,GAAuBA,GAA7B;AAEA,WAAOH,GAAG,GAAG,GAAN,GAAYG,GAAnB;AACH;;AAED,WAASC,MAAT,GAAmB;AACf,QAAIP,KAAK,CAACQ,OAAN,CAAcC,KAAd,KAAwB,UAA5B,EAAuC;AACnC,aAAOT,KAAK,CAACF,aAAN,GAAoB,EAA3B;AACH,KAFD,MAGI;AACA,aAAOE,KAAK,CAACH,aAAN,GAAoB,EAA3B;AACH;AACJ;;AAID,MAAGG,KAAK,CAACQ,OAAN,KAAkB,IAArB,EAA0B;AAAA;;AAC1B,wBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACGR,KAAK,CAACQ,OADT,mDACG,eAAeC,KADlB,WAC8BT,KAAK,CAACF,aADpC,gBAFF,eAME;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGG,sBAAsB,oBAACD,KAAK,CAACQ,OAAP,oDAAC,gBAAeE,aAAhB,CADzB,eANF,CADF,CAFA,eAcA;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,uBAAc,GAHhB;AAIE,uBAAeJ,MAAM,EAJvB;AAKE,uBAAgBP,KAAK,CAACF,aAAN,GAAoB,EAApB,GAAuBE,KAAK,CAACQ,OAAN,CAAcE,aALvD,CAKuE;AALvE;AAME,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE,CAACZ,KAAK,CAACF,aAAN,GAAoB,EAApB,GAAuBE,KAAK,CAACQ,OAAN,CAAcE,aAAtC,KAAsDV,KAAK,CAACF,aAAN,GAAoB,EAA1E,IAA8E,GAA9E,GAAoF;AAA7F,OANT,CAM6G;AAN7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAdA,CADA;AA+BC,GAhCD,MAiCI;AACA,WAAO,IAAP;AACH;AACJ;;AAED,eAAeC,cAAf","sourcesContent":["import React from \"react\";\r\nimport breakDuration from \"./BreakDuration\";\r\nimport focusDuration from \"./FocusDuration\";\r\n\r\nfunction TimerOnDisplay (props) {\r\n\r\n    function calculateTimeRemaining (time) {\r\n        let min = Math.floor(time/60);\r\n        let sec = time%60;\r\n\r\n        sec = sec < 10 ? \"0\" + sec : sec;\r\n    \r\n        return min + \":\" + sec;\r\n    }\r\n\r\n    function maxVal () {\r\n        if (props.session.label === \"Focusing\"){\r\n            return props.focusDuration*60;\r\n        }\r\n        else{\r\n            return props.breakDuration*60\r\n        }\r\n    }\r\n\r\n\r\n\r\n    if(props.session !== null){\r\n    return (\r\n    <div>\r\n    {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n    <div className=\"row mb-2\">\r\n      <div className=\"col\">\r\n        {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n        <h2 data-testid=\"session-title\">\r\n          {props.session?.label} for {props.focusDuration}:00 minutes                      \r\n        </h2>\r\n        {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n        <p className=\"lead\" data-testid=\"session-sub-title\">\r\n          {calculateTimeRemaining(props.session?.timeRemaining)} remaining\r\n        </p>\r\n      </div>\r\n    </div>\r\n    <div className=\"row mb-2\">\r\n      <div className=\"col\">\r\n        <div className=\"progress\" style={{ height: \"20px\" }}>\r\n          <div\r\n            className=\"progress-bar\"\r\n            role=\"progressbar\"\r\n            aria-valuemin=\"0\"\r\n            aria-valuemax={maxVal()}\r\n            aria-valuenow={(props.focusDuration*60-props.session.timeRemaining)} // TODO: Increase aria-valuenow as elapsed time increases\r\n            style={{ width: (props.focusDuration*60-props.session.timeRemaining)/(props.focusDuration*60)*100 + \"%\" }} // TODO: Increase width % as elapsed time increases\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n    )\r\n    }\r\n    else{\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default TimerOnDisplay;"]},"metadata":{},"sourceType":"module"}