{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benna\\\\Desktop\\\\Thinkful Homework\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport TimerOnDisplay from \"./TimerOnDisplay.js\";\nimport BreakDuration from \"./BreakDuration\";\nimport FocusDuration from \"./FocusDuration\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null); // ToDo: Allow the user to adjust the focus and break duration.\n  //change these to state or add to the state\n\n  const [focusDuration, setFocus] = useState(25);\n  const [breakDuration, setBreak] = useState(5);\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n  useInterval(() => {\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      return setSession(nextSession(focusDuration, breakDuration));\n    } // will add the update here happens every second \n\n\n    return setSession(nextTick);\n  }, isTimerRunning ? 1000 : null);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  const calculatePercentage = () => {\n    if ((session === null || session === void 0 ? void 0 : session.label) === \"Focusing\") {\n      return (session === null || session === void 0 ? void 0 : session.timeRemaining) / (focusDuration * 60);\n    } else {\n      return (session === null || session === void 0 ? void 0 : session.timeRemaining) / (breakDuration * 60);\n    }\n  };\n\n  const stop = event => {\n    event.preventDefault();\n    setSession(null);\n    setIsTimerRunning(false);\n  };\n\n  function calculateTimeRemaining(time) {\n    let min = Math.floor(time / 60);\n    let sec = time % 60;\n    sec = sec < 10 ? \"0\" + sec : sec;\n    return min + \":\" + sec;\n  }\n\n  function calculateTime(time) {\n    return time + \":\" + 0 + 0;\n  }\n\n  const validateStopButton = () => {\n    if (session === null || session === void 0 ? void 0 : session.isTimerRunning) {\n      if ((session === null || session === void 0 ? void 0 : session.prevState) === null) {\n        return true;\n      }\n\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const onClickHandler = (type, type2) => {\n    if (type === \"focus\") {\n      if (type2 === \"increase\") {\n        if (focusDuration < 60) {\n          setFocus(prev => prev += 5);\n        }\n      } else {\n        if (focusDuration > 5) {\n          setFocus(prev => prev -= 5);\n        }\n      }\n\n      return false;\n    } else {\n      if (type2 === \"increase\") {\n        if (breakDuration < 20) {\n          setBreak(prev => prev += 1);\n        }\n      } else {\n        if (breakDuration > 5) {\n          setBreak(prev => prev -= 1);\n        }\n      }\n\n      return false;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FocusDuration, {\n    isTimerRunning: isTimerRunning,\n    focusDuration: focusDuration,\n    onClickHandler: onClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(BreakDuration, {\n    isTimerRunning: isTimerRunning,\n    breakDuration: breakDuration,\n    onClickHandler: onClickHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(TimerOnDisplay, {\n    session: session,\n    focusDuration: focusDuration,\n    breakDuration: breakDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-group btn-group-lg mb-2\",\n    role: \"group\",\n    \"aria-label\": \"Timer controls\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    \"data-testid\": \"play-pause\",\n    title: \"Start or pause timer\",\n    onClick: playPause,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames({\n      oi: true,\n      \"oi-media-play\": !isTimerRunning,\n      \"oi-media-pause\": isTimerRunning\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-secondary\",\n    \"data-testid\": \"stop\",\n    onClick: stop,\n    title: \"Stop the session\",\n    disabled: validateStopButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"oi oi-media-stop\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 15\n    }\n  }))))));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/benna/Desktop/Thinkful Homework/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","TimerOnDisplay","BreakDuration","FocusDuration","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocus","setBreak","Audio","play","playPause","nextState","prevStateSession","calculatePercentage","stop","event","preventDefault","calculateTimeRemaining","time","min","floor","sec","calculateTime","validateStopButton","onClickHandler","type","type2","prev","oi"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport TimerOnDisplay from \"./TimerOnDisplay.js\";\nimport  BreakDuration from \"./BreakDuration\";\nimport  FocusDuration from \"./FocusDuration\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  \n  //change these to state or add to the state\n  const [focusDuration, setFocus] = useState(25);\n  const [breakDuration, setBreak] = useState(5);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n      if (session.timeRemaining === 0) {\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      // will add the update here happens every second \n\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  const calculatePercentage = () => {\n\n    if(session?.label === \"Focusing\"){\n      return session?.timeRemaining/(focusDuration*60);\n    }\n    else{\n      return session?.timeRemaining/(breakDuration*60);\n    }\n   \n\n  }\n\n  const stop = (event) => {\n    event.preventDefault();\n\n    setSession(null);\n    setIsTimerRunning(false);\n  }\n\n  function calculateTimeRemaining (time) {\n    let min = Math.floor(time/60);\n    let sec = time%60;\n\n    sec = sec < 10 ? \"0\" + sec : sec;\n    \n    return min + \":\" + sec;\n  }\n\n  function calculateTime (time) {\n    return time + \":\" + 0 + 0;\n  }\n\n  const validateStopButton = () => {\n    if (session?.isTimerRunning){\n      if(session?.prevState === null) {\n        return true;\n      }\n      return false;\n    }\n    else{\n      return true;\n    }\n  }\n\n  const onClickHandler = (type, type2) => {\n    if (type === \"focus\"){\n      if(type2 === \"increase\"){\n        if(focusDuration < 60){\n          setFocus( prev => prev += 5);\n        }\n      }\n      else {\n        if(focusDuration > 5){\n          setFocus(prev => prev -= 5);\n        }\n      }\n      return false;\n    }\n    else {\n      if(type2 === \"increase\"){\n        if(breakDuration < 20){\n          setBreak(prev => prev += 1);\n        }\n      }\n      else {\n        if(breakDuration > 5){\n          setBreak(prev => prev -=1);\n        }\n      }\n      return false;\n    }\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <FocusDuration isTimerRunning = {isTimerRunning} focusDuration = {focusDuration} onClickHandler = {onClickHandler}/>\n        <BreakDuration isTimerRunning = {isTimerRunning} breakDuration = {breakDuration} onClickHandler = {onClickHandler}/>\n      </div>\n      <TimerOnDisplay session = {session} focusDuration = {focusDuration} breakDuration = {breakDuration} />\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              onClick={stop}\n              title=\"Stop the session\"\n              disabled={validateStopButton}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}